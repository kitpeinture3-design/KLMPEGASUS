version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: klm-pegasus-postgres
    environment:
      POSTGRES_DB: klm_pegasus
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - klm-pegasus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d klm_pegasus"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: klm-pegasus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - klm-pegasus-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispassword
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: klm-pegasus-backend
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/klm_pegasus
      - REDIS_URL=redis://:redispassword@redis:6379
      - JWT_SECRET=votre-secret-jwt-super-securise
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - FRONTEND_URL=http://localhost:3000
      - AI_SERVICE_URL=http://ai-service:8001
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - klm-pegasus-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: klm-pegasus-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_AI_SERVICE_URL=http://localhost:8001
      - REACT_APP_STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
      - REACT_APP_ENVIRONMENT=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - klm-pegasus-network
    depends_on:
      - backend
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Service IA Python
  # Service IA Python
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: klm-pegasus-ai
    ports:
      - "8001:8001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=https://api.openai.com/v1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - BACKEND_URL=http://backend:8000
    volumes:
      - ./ai-service:/app
      - ai_temp_data:/tmp/assets
    networks:
      - klm-pegasus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB pour analytics (optionnel)
  mongodb:
    image: mongo:6-jammy
    container_name: klm-pegasus-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: klm_pegasus_analytics
    volumes:
      - mongodb_data:/data/db
    networks:
      - klm-pegasus-network
    restart: unless-stopped

  # Nginx (Reverse Proxy - Optionnel pour production)
  nginx:
    image: nginx:alpine
    container_name: klm-pegasus-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - klm-pegasus-network
    depends_on:
      - frontend
      - backend
      - ai-service
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  ai_temp_data:
    driver: local

networks:
  klm-pegasus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

